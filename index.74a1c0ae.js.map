{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-1ea6221cf44618ce.js","vector.ts","matrix.ts","vertex-buffer.ts","vertex-layout.ts","vertex-definition.ts","shader.ts","texture-loader.ts","node_modules/@parcel/runtime-js/lib/helpers/bundle-url.js","node_modules/@parcel/runtime-js/lib/runtime-cfb0f701efb3297e.js","tile.ts","solution-shared-edge.ts","transform-stack.ts","pixel-nudge.ts","main.ts","quad-index-buffer.ts","vertex.glsl","fragment.glsl","broken.ts"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"deqRD\\\":\\\"index.74a1c0ae.js\\\",\\\"4zON0\\\":\\\"block.ed583535.png\\\"}\"));","\n/**\n * A 2D vector on a plane.\n */\n\nexport class Vector {\n  /**\n   * A (0, 0) vector\n   */\n  public static get Zero() {\n    return new Vector(0, 0);\n  }\n\n  /**\n   * A (1, 1) vector\n   */\n  public static get One() {\n    return new Vector(1, 1);\n  }\n\n  /**\n   * A (0.5, 0.5) vector\n   */\n  public static get Half() {\n    return new Vector(0.5, 0.5);\n  }\n\n  /**\n   * A unit vector pointing up (0, -1)\n   */\n  public static get Up() {\n    return new Vector(0, -1);\n  }\n\n  /**\n   * A unit vector pointing down (0, 1)\n   */\n  public static get Down() {\n    return new Vector(0, 1);\n  }\n\n  /**\n   * A unit vector pointing left (-1, 0)\n   */\n  public static get Left() {\n    return new Vector(-1, 0);\n  }\n  /**\n   * A unit vector pointing right (1, 0)\n   */\n  public static get Right() {\n    return new Vector(1, 0);\n  }\n\n  /**\n   * Returns a vector of unit length in the direction of the specified angle in Radians.\n   * @param angle The angle to generate the vector\n   */\n  public static fromAngle(angle: number) {\n    return new Vector(Math.cos(angle), Math.sin(angle));\n  }\n\n  /**\n   * Checks if vector is not null, undefined, or if any of its components are NaN or Infinity.\n   */\n  public static isValid(vec: Vector) {\n    if (vec === null || vec === undefined) {\n      return false;\n    }\n    if (isNaN(vec.x) || isNaN(vec.y)) {\n      return false;\n    }\n\n    if (vec.x === Infinity || vec.y === Infinity || vec.x === -Infinity || vec.y === -Infinity) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Calculates distance between two Vectors\n   * @param vec1\n   * @param vec2\n   */\n  public static distance(vec1: Vector, vec2: Vector) {\n    return Math.sqrt(Math.pow(vec1.x - vec2.x, 2) + Math.pow(vec1.y - vec2.y, 2));\n  }\n\n  /**\n   * @param x  X component of the Vector\n   * @param y  Y component of the Vector\n   */\n  constructor(x: number, y: number) {\n    this._x = x;\n    this._y = y;\n  }\n\n  protected _x = 0;\n  /**\n   * Get the x component of the vector\n   */\n  public get x(): number {\n    return this._x;\n  }\n\n  /**\n   * Set the x component, THIS MUTATES the current vector. It is usually better to create a new vector.\n   * @warning **Be very careful setting components on shared vectors, mutating shared vectors can cause hard to find bugs**\n   */\n  public set x(val: number) {\n    this._x = val;\n  }\n\n  protected _y = 0;\n  /**\n   * Get the y component of the vector\n   */\n  public get y(): number {\n    return this._y;\n  }\n\n  /**\n   * Set the y component, THIS MUTATES the current vector. It is usually better to create a new vector.\n   * @warning **Be very careful setting components on shared vectors, mutating shared vectors can cause hard to find bugs**\n   */\n  public set y(val: number) {\n    this._y = val;\n  }\n\n  /**\n   * Sets the x and y components at once, THIS MUTATES the current vector. It is usually better to create a new vector.\n   *\n   * @warning **Be very careful using this, mutating vectors can cause hard to find bugs**\n   */\n  setTo(x: number, y: number) {\n    (this.x as number) = x;\n    (this.y as number) = y;\n  }\n\n  /**\n   * Compares this point against another and tests for equality\n   * @param vector The other point to compare to\n   * @param tolerance Amount of euclidean distance off we are willing to tolerate\n   */\n  public equals(vector: Vector, tolerance: number = 0.001): boolean {\n    return Math.abs(this.x - vector.x) <= tolerance && Math.abs(this.y - vector.y) <= tolerance;\n  }\n\n  /**\n   * The distance to another vector. If no other Vector is specified, this will return the [[magnitude]].\n   * @param v  The other vector. Leave blank to use origin vector.\n   */\n  public distance(v?: Vector): number {\n    if (!v) {\n      v = Vector.Zero;\n    }\n    return Math.sqrt(Math.pow(this.x - v.x, 2) + Math.pow(this.y - v.y, 2));\n  }\n\n  public squareDistance(v?: Vector): number {\n    if (!v) {\n      v = Vector.Zero;\n    }\n    return Math.pow(this.x - v.x, 2) + Math.pow(this.y - v.y, 2);\n  }\n\n  /**\n   * The size (magnitude) of the Vector\n   */\n  public get size(): number {\n    return this.distance();\n  }\n\n  /**\n   * Setting the size mutates the current vector\n   *\n   * @warning Can be used to set the size of the vector, **be very careful using this, mutating vectors can cause hard to find bugs**\n   */\n  public set size(newLength: number) {\n    const v = this.normalize().scale(newLength);\n    this.setTo(v.x, v.y);\n  }\n\n  /**\n   * Normalizes a vector to have a magnitude of 1.\n   */\n  public normalize(): Vector {\n    const d = this.distance();\n    if (d > 0) {\n      return new Vector(this.x / d, this.y / d);\n    } else {\n      return new Vector(0, 1);\n    }\n  }\n\n  /**\n   * Returns the average (midpoint) between the current point and the specified\n   */\n  public average(vec: Vector): Vector {\n    return this.add(vec).scale(0.5);\n  }\n\n  /**\n   * Scales a vector's by a factor of size\n   * @param size  The factor to scale the magnitude by\n   */\n  public scale(scale: Vector): Vector;\n  public scale(size: number): Vector;\n  public scale(sizeOrScale: number | Vector): Vector {\n    if (sizeOrScale instanceof Vector) {\n      return new Vector(this.x * sizeOrScale.x, this.y * sizeOrScale.y);\n    } else {\n      return new Vector(this.x * sizeOrScale, this.y * sizeOrScale);\n    }\n  }\n\n  /**\n   * Adds one vector to another\n   * @param v The vector to add\n   */\n  public add(v: Vector): Vector {\n    return new Vector(this.x + v.x, this.y + v.y);\n  }\n\n  /**\n   * Subtracts a vector from another, if you subtract vector `B.sub(A)` the resulting vector points from A -> B\n   * @param v The vector to subtract\n   */\n  public sub(v: Vector): Vector {\n    return new Vector(this.x - v.x, this.y - v.y);\n  }\n\n  /**\n   * Adds one vector to this one modifying the original\n   * @param v The vector to add\n   * @warning Be very careful using this, mutating vectors can cause hard to find bugs\n   */\n  public addEqual(v: Vector): Vector {\n    this.setTo(this.x + v.x, this.y + v.y);\n    return this;\n  }\n\n  /**\n   * Subtracts a vector from this one modifying the original\n   * @param v The vector to subtract\n   * @warning Be very careful using this, mutating vectors can cause hard to find bugs\n   */\n  public subEqual(v: Vector): Vector {\n    this.setTo(this.x - v.x, this.y - v.y);\n    return this;\n  }\n\n  /**\n   * Scales this vector by a factor of size and modifies the original\n   * @warning Be very careful using this, mutating vectors can cause hard to find bugs\n   */\n  public scaleEqual(size: number): Vector {\n    this.setTo(this.x * size, this.y * size);\n    return this;\n  }\n\n  /**\n   * Performs a dot product with another vector\n   * @param v  The vector to dot\n   */\n  public dot(v: Vector): number {\n    return this.x * v.x + this.y * v.y;\n  }\n\n  /**\n   * Performs a 2D cross product with scalar. 2D cross products with a scalar return a vector.\n   * @param v  The scalar to cross\n   */\n  public cross(v: number): Vector;\n  /**\n   * Performs a 2D cross product with another vector. 2D cross products return a scalar value not a vector.\n   * @param v  The vector to cross\n   */\n  public cross(v: Vector): number;\n  public cross(v: any): any {\n    if (v instanceof Vector) {\n      return this.x * v.y - this.y * v.x;\n    } else if (typeof v === 'number') {\n      return new Vector(v * this.y, -v * this.x);\n    }\n  }\n\n  static cross(num: number, vec: Vector): Vector {\n    return new Vector(-num * vec.y, num * vec.x);\n  }\n\n  /**\n   * Returns the perpendicular vector to this one\n   */\n  public perpendicular(): Vector {\n    return new Vector(this.y, -this.x);\n  }\n\n  /**\n   * Returns the normal vector to this one, same as the perpendicular of length 1\n   */\n  public normal(): Vector {\n    return this.perpendicular().normalize();\n  }\n\n  /**\n   * Negate the current vector\n   */\n  public negate(): Vector {\n    return this.scale(-1);\n  }\n\n  /**\n   * Returns the angle of this vector.\n   */\n  public toAngle(): number {\n    return Math.atan2(this.y, this.x);\n  }\n\n  /**\n   * Rotates the current vector around a point by a certain number of\n   * degrees in radians\n   */\n  public rotate(angle: number, anchor?: Vector): Vector {\n    if (!anchor) {\n      anchor = new Vector(0, 0);\n    }\n    const sinAngle = Math.sin(angle);\n    const cosAngle = Math.cos(angle);\n    const x = cosAngle * (this.x - anchor.x) - sinAngle * (this.y - anchor.y) + anchor.x;\n    const y = sinAngle * (this.x - anchor.x) + cosAngle * (this.y - anchor.y) + anchor.y;\n    return new Vector(x, y);\n  }\n\n  /**\n   * Creates new vector that has the same values as the previous.\n   */\n  public clone(): Vector {\n    return new Vector(this.x, this.y);\n  }\n\n  /**\n   * Returns a string representation of the vector.\n   */\n  public toString(fixed?: number): string {\n    if (fixed) {\n      return `(${this.x.toFixed(fixed)}, ${this.y.toFixed(fixed)})`;\n    }\n    return `(${this.x}, ${this.y})`;\n  }\n}\n\n/**\n * Shorthand for creating new Vectors - returns a new Vector instance with the\n * provided X and Y components.\n *\n * @param x  X component of the Vector\n * @param y  Y component of the Vector\n */\nexport function vec(x: number, y: number): Vector {\n  return new Vector(x, y);\n}\n","import { Vector } from \"./vector\";\n\nexport class Matrix {\n  /**\n   *  4x4 matrix in column major order\n   *\n   * |         |         |          |          |\n   * | ------- | ------- | -------- |          |\n   * | data[0] | data[4] | data[8]  | data[12] |\n   * | data[1] | data[5] | data[9]  | data[13] |\n   * | data[2] | data[6] | data[10] | data[14] |\n   * | data[3] | data[7] | data[11] | data[15] |\n   *\n   */\n  data = new Float32Array(16);\n\n  /**\n   * Creates an orthographic (flat non-perspective) projection\n   * https://en.wikipedia.org/wiki/Orthographic_projection\n   * @param {number} left\n   * @param {number} right\n   * @param {number} bottom\n   * @param {number} top\n   * @param {number} near\n   * @param {number} far\n   * @returns Matrix\n   */\n  static ortho(left, right, bottom, top, near, far) {\n    const mat = new Matrix();\n    mat.data[0] = 2 / (right - left);\n    mat.data[1] = 0;\n    mat.data[2] = 0;\n    mat.data[3] = 0;\n\n    mat.data[4] = 0;\n    mat.data[5] = 2 / (top - bottom);\n    mat.data[6] = 0;\n    mat.data[7] = 0;\n\n    mat.data[8] = 0;\n    mat.data[9] = 0;\n    mat.data[10] = -2 / (far - near);\n    mat.data[11] = 0;\n\n    mat.data[12] = -(right + left) / (right - left);\n    mat.data[13] = -(top + bottom) / (top - bottom);\n    mat.data[14] = -(far + near) / (far - near);\n    mat.data[15] = 1;\n    return mat;\n  }\n\n  /**\n     * Creates a new identity matrix (a matrix that when applied does nothing)\n     */\n  public static identity(): Matrix {\n    const mat = new Matrix();\n    mat.data[0] = 1;\n    mat.data[1] = 0;\n    mat.data[2] = 0;\n    mat.data[3] = 0;\n\n    mat.data[4] = 0;\n    mat.data[5] = 1;\n    mat.data[6] = 0;\n    mat.data[7] = 0;\n\n    mat.data[8] = 0;\n    mat.data[9] = 0;\n    mat.data[10] = 1;\n    mat.data[11] = 0;\n\n    mat.data[12] = 0;\n    mat.data[13] = 0;\n    mat.data[14] = 0;\n    mat.data[15] = 1;\n    return mat;\n  }\n\n  /**\n   * Creates a new Matrix with the same data as the current 4x4\n   */\n  public clone(): Matrix {\n    const mat = new Matrix();\n    mat.data[0] = this.data[0];\n    mat.data[1] = this.data[1];\n    mat.data[2] = this.data[2];\n    mat.data[3] = this.data[3];\n\n    mat.data[4] = this.data[4];\n    mat.data[5] = this.data[5];\n    mat.data[6] = this.data[6];\n    mat.data[7] = this.data[7];\n\n    mat.data[8] = this.data[8];\n    mat.data[9] = this.data[9];\n    mat.data[10] = this.data[10];\n    mat.data[11] = this.data[11];\n\n    mat.data[12] = this.data[12];\n    mat.data[13] = this.data[13];\n    mat.data[14] = this.data[14];\n    mat.data[15] = this.data[15];\n    return mat;\n  }\n\n  /**\n * Applies scaling to the current matrix mutating it\n * @param x\n * @param y\n */\n  scale(x: number, y: number) {\n    const a11 = this.data[0];\n    const a21 = this.data[1];\n    const a31 = this.data[2];\n    const a41 = this.data[3];\n\n    const a12 = this.data[4];\n    const a22 = this.data[5];\n    const a32 = this.data[6];\n    const a42 = this.data[7];\n\n    this.data[0] = a11 * x;\n    this.data[1] = a21 * x;\n    this.data[2] = a31 * x;\n    this.data[3] = a41 * x;\n\n    this.data[4] = a12 * y;\n    this.data[5] = a22 * y;\n    this.data[6] = a32 * y;\n    this.data[7] = a42 * y;\n\n    return this;\n  }\n\n  /**\n   * Applies translation to the current matrix mutating it\n   * @param x\n   * @param y\n   */\n  translate(x: number, y: number) {\n    const a11 = this.data[0];\n    const a21 = this.data[1];\n    const a31 = this.data[2];\n    const a41 = this.data[3];\n\n    const a12 = this.data[4];\n    const a22 = this.data[5];\n    const a32 = this.data[6];\n    const a42 = this.data[7];\n\n    const a13 = this.data[8];\n    const a23 = this.data[9];\n    const a33 = this.data[10];\n    const a43 = this.data[11];\n\n    const a14 = this.data[12];\n    const a24 = this.data[13];\n    const a34 = this.data[14];\n    const a44 = this.data[15];\n\n    // Doesn't change z\n    const z = 0;\n    const w = 1;\n    this.data[12] = a11 * x + a12 * y + a13 * z + a14 * w;\n    this.data[13] = a21 * x + a22 * y + a23 * z + a24 * w;\n    this.data[14] = a31 * x + a32 * y + a33 * z + a34 * w;\n    this.data[15] = a41 * x + a42 * y + a43 * z + a44 * w;\n\n    return this;\n  }\n\n  /**\n   * Applies rotation to the current matrix mutating it\n   * @param angle in Radians\n   */\n  rotate(angle: number) {\n    const a11 = this.data[0];\n    const a21 = this.data[1];\n    const a31 = this.data[2];\n    const a41 = this.data[3];\n\n    const a12 = this.data[4];\n    const a22 = this.data[5];\n    const a32 = this.data[6];\n    const a42 = this.data[7];\n\n    const sine = Math.sin(angle);\n    const cosine = Math.cos(angle);\n\n    this.data[0] = cosine * a11 + sine * a12;\n    this.data[1] = cosine * a21 + sine * a22;\n    this.data[2] = cosine * a31 + sine * a32;\n    this.data[3] = cosine * a41 + sine * a42;\n\n    this.data[4] = cosine * a12 - sine * a11;\n    this.data[5] = cosine * a22 - sine * a21;\n    this.data[6] = cosine * a32 - sine * a31;\n    this.data[7] = cosine * a42 - sine * a41;\n\n    return this;\n  }\n\n  /**\n   * Multiplies the current matrix by a vector and returns the resulting vector\n   * @param other\n   */\n  multv(other: [number, number]): [number, number];\n  multv(other: Vector): Vector;\n  multv(other: [number, number] | Vector): [number, number] | Vector {\n    const z = 0;\n    if (other instanceof Vector) {\n      return new Vector(\n        other.x * this.data[0] + other.y * this.data[4] + z * this.data[6] + 1 * this.data[12],\n        other.x * this.data[1] + other.y * this.data[5] + z * this.data[9] + 1 * this.data[13]\n      );\n    } else {\n      const dest: [number, number] = [\n        other[0] * this.data[0] + other[1] * this.data[4] + z * this.data[6] + 1 * this.data[12],\n\n        other[0] * this.data[1] + other[1] * this.data[5] + z * this.data[9] + 1 * this.data[13]\n      ];\n      return dest;\n    }\n  }\n\n  public getAffineInverse(): Matrix {\n    // See http://negativeprobability.blogspot.com/2011/11/affine-transformations-and-their.html\n    // See https://www.mathsisfun.com/algebra/matrix-inverse.html\n    // Since we are actually only doing 2D transformations we can use this hack\n    // We don't actually use the 3rd or 4th dimension\n\n    const det = this.getBasisDeterminant();\n    const inverseDet = 1 / det; // todo zero check\n    const a = this.data[0];\n    const b = this.data[4];\n    const c = this.data[1];\n    const d = this.data[5];\n\n    const m = Matrix.identity();\n    // inverts rotation and scale\n    m.data[0] = d * inverseDet;\n    m.data[1] = -c * inverseDet;\n    m.data[4] = -b * inverseDet;\n    m.data[5] = a * inverseDet;\n\n    const tx = this.data[12];\n    const ty = this.data[13];\n    // invert translation\n    // transform translation into the matrix basis created by rot/scale\n    m.data[12] = -(tx * m.data[0] + ty * m.data[4]);\n    m.data[13] = -(tx * m.data[1] + ty * m.data[5]);\n\n    return m;\n  }\n\n  /**\n   * Determinant of the upper left 2x2 matrix\n   */\n   public getBasisDeterminant() {\n    return this.data[0] * this.data[5] - this.data[1] * this.data[4];\n  }\n}","export class VertexBuffer {\n    public buffer: WebGLBuffer;\n    public bufferData: Float32Array;\n    private _gl: WebGLRenderingContext;\n    sizePerVertex: number;\n    numberOfVertices: number;\n    isStatic: boolean;\n    constructor(gl: WebGLRenderingContext, numberOfVertices: number, sizePerVertex: number, isStatic = false) {\n        this._gl = gl;\n        const total = numberOfVertices * sizePerVertex;\n        this.buffer = gl.createBuffer();\n        this.numberOfVertices = numberOfVertices;\n        this.sizePerVertex = sizePerVertex;\n        this.isStatic = isStatic;\n        this.bufferData = new Float32Array(total);\n    }\n\n    fill(filler: (data: Float32Array, numberOfVertices: number, sizePerVertex: number) => any) {\n        filler(this.bufferData, this.numberOfVertices, this.sizePerVertex);\n    }\n\n    bind() {\n        const gl = this._gl;\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer);\n    }\n\n    upload() {\n        const gl = this._gl;\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer);\n        gl.bufferData(gl.ARRAY_BUFFER, this.bufferData, this.isStatic ? gl.STATIC_DRAW : gl.DYNAMIC_DRAW);\n    }\n}","import { Shader } from './shader';\nimport { VertexBuffer } from './vertex-buffer';\n\nexport interface VertexAttributeDefinition {\n    name: string;\n    size: number;\n    glType: number;\n    normalized: boolean;\n    location: number;\n}\n\nexport class VertexLayout {\n    private _gl: WebGLRenderingContext;\n    private _vertexBuffer: VertexBuffer;\n    private _shader: Shader;\n    private _layout: VertexAttributeDefinition[] = [];\n    constructor(gl: WebGLRenderingContext, shader: Shader, vertexBuffer: VertexBuffer) {\n        this._gl = gl;\n        this._vertexBuffer = vertexBuffer;\n        this._shader = shader;\n    }\n    /**\n     * Total number of bytes that the vertex will take up\n     */\n     public get totalVertexSizeBytes(): number {\n        let vertexSize = 0;\n        for (const vert of this._layout) {\n          let typeSize = 1;\n          switch (vert.glType) {\n            case this._gl.FLOAT: {\n              typeSize = 4;\n              break;\n            }\n            case this._gl.SHORT: {\n              typeSize = 2;\n              break;\n            }\n            default: {\n              typeSize = 1;\n            }\n          }\n          vertexSize += typeSize * vert.size;\n        }\n    \n        return vertexSize;\n      }\n\n    addVertexAttributeLayout(attributes: string[]) {\n        const shaderAttributes = this._shader.attributes;\n        for (let attribute of attributes) {\n            const attrib = shaderAttributes[attribute];\n            if (!attrib) throw Error(attribute + ' not found in the shader source');\n            this._layout.push(attrib);\n        }\n    }\n\n    bind() {\n        this._vertexBuffer.bind();\n        const gl = this._gl;\n        let offset = 0;\n        for (const vert of this._layout) {\n            gl.vertexAttribPointer(vert.location, vert.size, vert.glType, vert.normalized, this.totalVertexSizeBytes, offset);\n            gl.enableVertexAttribArray(vert.location);\n            offset += this._shader.getAttributeSize(vert.name);\n        }\n    }\n}","import { Shader } from './shader';\nimport { VertexBuffer } from './vertex-buffer';\nimport { VertexLayout } from './vertex-layout';\n\nexport interface VertexMemoryDefinitionOptions {\n    gl: WebGLRenderingContext,\n    shader: Shader,\n    numberOfVertices: number,\n    layout: [name: string, size: number][],\n    static?: boolean\n}\n\nexport class VertexMemoryDefinition {\n    public buffer: VertexBuffer;\n    public layout: VertexLayout;\n    constructor(options: VertexMemoryDefinitionOptions) {\n        const vertexSize = options.layout.reduce((acc, v) => acc + v[1], 0);\n        this.buffer = new VertexBuffer(options.gl, options.numberOfVertices, vertexSize, options.static);\n        this.layout = new VertexLayout(options.gl, options.shader, this.buffer);\n        this.layout.addVertexAttributeLayout(options.layout.map(v => v[0]));\n    }\n}","import { VertexBuffer } from './vertex-buffer';\nimport { VertexMemoryDefinition, VertexMemoryDefinitionOptions } from './vertex-definition';\nimport { VertexLayout } from './vertex-layout';\n\nexport interface VertexAttributeDefinition {\n    name: string;\n    size: number;\n    glType: number;\n    normalized: boolean;\n    location: number;\n  }\n  \n  export interface UniformDefinition {\n    name: string;\n    location: WebGLUniformLocation;\n    type: string;\n    data: any;\n  }\n\nexport interface Attribute {\n  name: string;\n  type: 'static' | 'dynamic';\n}\n  \n  /**\n   * Create a shader program for the Excalibur WebGL Graphics Context\n   */\n  export class Shader {\n    public program!: WebGLProgram;\n    private _gl: WebGLRenderingContext;\n    public uniforms: { [variableName: string]: UniformDefinition } = {};\n    public attributes: { [variableName: string]: VertexAttributeDefinition } = {};\n    public layout: VertexAttributeDefinition[] = [];\n\n    private _vertexLayouts: VertexLayout[] = [];\n    private _vertexDefinition: VertexMemoryDefinition[] = [];\n    private _compiled = false;\n    public get compiled() {\n      return this._compiled;\n    }\n  \n    /**\n     * Create a shader program in excalibur\n     * @param _gl WebGL graphics context\n     * @param _vertexSource Vertex shader source as a string\n     * @param _fragmentSource Fragment shader source as a string\n     */\n    constructor(private _vertexSource: string, private _fragmentSource: string) {}\n  \n    private _createProgram(gl: WebGLRenderingContext, vertexShader: WebGLShader, fragmentShader: WebGLShader): WebGLProgram {\n      const program = gl.createProgram();\n      if (program === null) {\n        throw Error('Could not create graphics shader program');\n      }\n  \n      // attach the shaders.\n      gl.attachShader(program, vertexShader);\n      gl.attachShader(program, fragmentShader);\n  \n      // link the program.\n      gl.linkProgram(program);\n  \n      const success = gl.getProgramParameter(program, gl.LINK_STATUS);\n      if (!success) {\n        throw Error(`Could not link the program: [${gl.getProgramInfoLog(program)}]`);\n      }\n  \n      return program;\n    }\n  \n    private _compileShader(gl: WebGLRenderingContext, source: string, type: number): WebGLShader {\n      const shader = gl.createShader(type);\n      if (shader === null) {\n        throw Error(`Could not build shader: [${source}]`);\n      }\n  \n      gl.shaderSource(shader, source);\n      gl.compileShader(shader);\n  \n      const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n      if (!success) {\n        throw Error(`Could not compile shader [${gl.getShaderInfoLog(shader)}]`);\n      }\n      return shader;\n    }\n  \n    /**\n     * Specify the order of shader attributes for each vertex in your vertex buffer\n     */\n    setVertexAttributeLayout(attributes: Attribute[]) {\n      // TODO verify compiled\n      // TODO specify the vertice layout in the VBO\n      // Make sure all the attributes are included\n      const allAttributes = new Set(Object.keys(this.attributes));\n      for (let attribute of attributes) {\n        if (allAttributes.has(attribute.name)) {\n          this.layout.push(this.attributes[attribute.name]);\n          allAttributes.delete(attribute.name);\n        }\n      }\n      if (allAttributes.size > 0) {\n        throw new Error(`Specified vertex layout is missing some attributes that are in the shader source [${Array.from(allAttributes.values()).join(',')}]`)\n      }\n    }\n\n    getUniforms(gl: WebGLRenderingContext): UniformDefinition[] {\n      const uniformCount = gl.getProgramParameter(this.program, gl.ACTIVE_UNIFORMS);\n      const uniforms: UniformDefinition[] = [];\n      for (let i = 0; i < uniformCount; i++) {\n        const uniform = gl.getActiveUniform(this.program, i);\n        const uniformLocation = gl.getUniformLocation(this.program, uniform.name);\n        uniforms.push({\n          name: uniform.name,\n          type: uniform.type.toString(), // TODO this is dubious\n          location: uniformLocation,\n          data: null\n        });\n      }\n      return uniforms;\n    }\n  \n    getAttributes(gl: WebGLRenderingContext): VertexAttributeDefinition[] {\n      const attributCount = gl.getProgramParameter(this.program, gl.ACTIVE_ATTRIBUTES);\n      const attributes: VertexAttributeDefinition[] = [];\n      for (let i = 0; i < attributCount; i++) {\n        const attribute = gl.getActiveAttrib(this.program, i);\n        const attributeLocation = gl.getAttribLocation(this.program, attribute.name);\n        attributes.push({\n          name: attribute.name,\n          glType: this.getAttribPointerTypeFromAttributeType(attribute.type),\n          size: this.getAttribPointerSizeFromFromAttributeType(attribute.type),\n          location: attributeLocation,\n          normalized: false\n        });\n      }\n      return attributes;\n    }\n  \n    /**\n     * Compile the current shader against a webgl context\n     * @param gl WebGL context\n     */\n    compile(gl: WebGLRenderingContext): WebGLProgram {\n      this._gl = gl;\n      const vertexShader = this._compileShader(gl, this._vertexSource, gl.VERTEX_SHADER);\n      const fragmentShader = this._compileShader(gl, this._fragmentSource, gl.FRAGMENT_SHADER);\n      const program = this._createProgram(gl, vertexShader, fragmentShader);\n      \n      this.program = program\n      const attributes = this.getAttributes(gl);\n      for (let attribute of attributes) {\n        this.attributes[attribute.name] = attribute;\n      }\n      const _uniforms = this.getUniforms(gl);\n      this._compiled = true;\n      return this.program;\n    }\n\n    addVertexLayout(vertexLayout: VertexLayout) {\n      this._vertexLayouts.push(vertexLayout);\n    }\n\n    createVertexMemoryDefinition(options: Omit<VertexMemoryDefinitionOptions, 'gl' | 'shader'>): VertexMemoryDefinition {\n      const vertexSize = options.layout.reduce((acc, v) => acc + v[1], 0);\n      const buffer = new VertexBuffer(this._gl, options.numberOfVertices, vertexSize, options.static);\n      const layout = new VertexLayout(this._gl, this, buffer);\n      layout.addVertexAttributeLayout(options.layout.map(v => v[0]));\n\n      const vertexDefinition = new VertexMemoryDefinition({\n        gl: this._gl,\n        shader: this,\n        ...options\n      });\n      this._vertexLayouts.push(vertexDefinition.layout);\n      return vertexDefinition;\n    }\n  \n    /**\n     * Add a uniform [[Matrix]] to the shader\n     * @param name Name of the uniform in the shader source\n     * @param data (4x4) matrix in column major order\n     */\n    public addUniformMatrix(name: string, data: Float32Array) {\n      if (!data) {\n        throw Error(`Shader Uniform Matrix '${name}' was set to null or undefined`);\n      }\n      const gl = this._gl;\n      this.uniforms[name] = {\n        name,\n        type: 'matrix4fv',\n        location: gl.getUniformLocation(this.program, name) ?? Error(`Could not find uniform matrix [${name}]`),\n        data: data\n      };\n    }\n  \n    /**\n     * Add a uniform array of numbers to the shader\n     * @param name Name of the uniform in the shader source\n     * @param data List of numbers\n     */\n    public addUniformIntegerArray(name: string, data: number[]) {\n      if (!data) {\n        throw Error(`Shader Uniform Integery Array '${name}' was set to null or undefined`);\n      }\n      const gl = this._gl;\n      this.uniforms[name] = {\n        name,\n        type: '1iv',\n        location: gl.getUniformLocation(this.program, name) ?? Error(`Could not find uniform matrix [${name}]`),\n        data: data\n      };\n    }\n  \n    public addUniformInteger(name: string, data: number) {\n      if (!data) {\n        throw Error(`Shader Uniform Integery Array '${name}' was set to null or undefined`);\n      }\n      const gl = this._gl;\n      this.uniforms[name] = {\n        name,\n        type: '1i',\n        location: gl.getUniformLocation(this.program, name) ?? Error(`Could not find uniform [${name}]`),\n        data: data\n      };\n    }\n  \n  \n    public addUniformFloat(name: string, float: number = 0) {\n      const gl = this._gl;\n      this.uniforms[name] = {\n        name,\n        type: '1f',\n        location: gl.getUniformLocation(this.program, name) ?? Error(`Could not find uniform [${name}]`),\n        data: float\n      };\n    }\n  \n    public addUniformFloat2(name: string, float1: number = 0, float2: number = 0) {\n      const gl = this._gl;\n      this.uniforms[name] = {\n        name,\n        type: '2f',\n        location: gl.getUniformLocation(this.program, name) ?? Error(`Could not find uniform [${name}]`),\n        data: [float1, float2]\n      };\n    }\n  \n    /**\n     * Optionally override attributes parameters\n     * @param name Name of the attribute in the shader source\n     * @param size The size of the attribute in gl.Type units, for example `vec2 a_pos` would be 2 gl.FLOAT, or 1 gl.FLOAT_VEC2\n     * @param glType The gl.Type of the attribute\n     * @param normalized Optionally set normalized which means between 0 and 1\n     */\n    public setAttribute(name: string, size: number, glType: number, normalized = false) {\n      const gl = this._gl;\n      // TODO needs to be compiled first\n      const location = gl.getAttribLocation(this.program, name);\n      this.attributes[name] = {\n        name,\n        size,\n        glType,\n        normalized,\n        location\n      };\n    }\n  \n    /**\n     * Number of javascript floats a vertex will take up\n     */\n    public get vertexAttributeSize(): number {\n      let vertexSize = 0;\n      for (const vert of this.layout) {\n        vertexSize += vert.size;\n      }\n      return vertexSize;\n    }\n  \n    /**\n     * Total number of bytes that the vertex will take up\n     */\n    public get totalVertexSizeBytes(): number {\n      let vertexSize = 0;\n      for (const vert of this.layout) {\n        let typeSize = 1;\n        switch (vert.glType) {\n          case this._gl.FLOAT: {\n            typeSize = 4;\n            break;\n          }\n          case this._gl.SHORT: {\n            typeSize = 2;\n            break;\n          }\n          default: {\n            typeSize = 1;\n          }\n        }\n        vertexSize += typeSize * vert.size;\n      }\n  \n      return vertexSize;\n    }\n  \n    public getAttribPointerTypeFromAttributeType(type: number) {\n      switch(type) {\n        case this._gl.LOW_FLOAT:\n        case this._gl.HIGH_FLOAT:\n        case this._gl.FLOAT:\n        case this._gl.FLOAT_VEC2:\n        case this._gl.FLOAT_VEC3:\n        case this._gl.FLOAT_VEC4:\n        case this._gl.FLOAT_MAT2:\n        case this._gl.FLOAT_MAT3:\n        case this._gl.FLOAT_MAT4:\n          return this._gl.FLOAT;\n        case this._gl.BYTE:\n          return this._gl.BYTE;\n        case this._gl.UNSIGNED_BYTE:\n          return this._gl.UNSIGNED_BYTE;\n        case this._gl.SHORT:\n          return this._gl.SHORT;\n        default:\n          return this._gl.FLOAT;\n      }\n    }\n  \n    public getAttribPointerSizeFromFromAttributeType(type: number) {\n      switch(type) {\n        case this._gl.LOW_FLOAT:\n        case this._gl.HIGH_FLOAT:\n        case this._gl.FLOAT:\n          return 1;\n        case this._gl.FLOAT_VEC2:\n          return 2;\n        case this._gl.FLOAT_VEC3:\n          return 3;\n        case this._gl.FLOAT_VEC4:\n          return 4;\n        case this._gl.BYTE:\n          return 1;\n        case this._gl.UNSIGNED_BYTE:\n          return 1;\n        case this._gl.SHORT:\n          return 1;\n        default:\n          return 1;\n      }\n    }\n  \n    /**\n     * Get a previously defined attribute size in bytes\n     * @param name\n     */\n    public getAttributeSize(name: string) {\n      let typeSize = 1;\n      switch (this.attributes[name].glType) {\n        case this._gl.LOW_FLOAT:\n        case this._gl.HIGH_FLOAT:\n        case this._gl.FLOAT: {\n          typeSize = 4; // 32 bit - 4 bytes\n          break;\n        }\n        case this._gl.FLOAT_VEC2: {\n          typeSize = 4 * 2;\n          break;\n        }\n        case this._gl.FLOAT_VEC3: {\n          typeSize = 4 * 3;\n          break;\n        }\n        case this._gl.FLOAT_VEC4: {\n          typeSize = 4 * 4;\n          break;\n        }\n        case this._gl.FLOAT_MAT2: {\n          typeSize = 4 * 4; // 2x2 = 4 floats\n          break;\n        }\n        case this._gl.FLOAT_MAT3: {\n          typeSize = 4 * 9; // 3x3 = 9 floats\n          break;\n        }\n        case this._gl.FLOAT_MAT4: {\n          typeSize = 4 * 16; // 4x4 = 16 floats\n          break;\n        }\n        case this._gl.BYTE: {\n          typeSize = 1; //\n          break;\n        }\n        case this._gl.INT: {\n          typeSize = 4; //\n          break;\n        }\n        case this._gl.SHORT: {\n          typeSize = 2; //\n          break;\n        }\n        case this._gl.INT_VEC2: {\n          typeSize = 4 * 2; //\n          break;\n        }\n        case this._gl.INT_VEC3: {\n          typeSize = 4 * 3; //\n          break;\n        }\n        case this._gl.INT_VEC4: {\n          typeSize = 4 * 3; //\n          break;\n        }\n        case this._gl.UNSIGNED_INT: {\n          typeSize = 4; //\n          break;\n        }\n        default: {\n          typeSize = 1; // 1 byte\n        }\n      }\n      return typeSize * this.attributes[name].size;\n    }\n  \n    /**\n     * Sets this shader program as the current in the underlying webgl context\n     *\n     * **Must** specify all attributes and uniforms before calling this\n     */\n    public use() {\n      const gl = this._gl;\n      gl.useProgram(this.program);\n      for (const layout of this._vertexLayouts) {\n        layout.bind();\n      }\n  \n      // TODO all uniform types\n      // Setup uniforms for the shader\n      for (const key in this.uniforms) {\n        const uniform = this.uniforms[key];\n        switch (uniform.type) {\n          case 'matrix4fv': {\n            gl.uniformMatrix4fv(uniform.location, false, uniform.data);\n            break;\n          }\n          case '1iv': {\n            gl.uniform1iv(uniform.location, uniform.data);\n            break;\n          }\n          case '1i': {\n            gl.uniform1i(uniform.location, uniform.data);\n            break;\n          }\n          case '2f': {\n            gl.uniform2f(uniform.location, uniform.data[0], uniform.data[1]);\n            break;\n          }\n          case '1f': {\n            gl.uniform1f(uniform.location, uniform.data);\n            break;\n          }\n        }\n      }\n    }\n  }\n  ","/**\n * Checks if the current number is a power of two\n */\n export function isPowerOfTwo(x: number): boolean {\n    return (x & (x - 1)) === 0;\n  }\n  \n  /**\n  * Returns the next highest power of two\n  */\n  export function nextHighestPowerOfTwo(x: number): number {\n    --x;\n    for (let i = 1; i < 32; i <<= 1) {\n        x = x | (x >> i);\n    }\n    return x + 1;\n  }\n  \n  /**\n  * Returns the input number if a power of two, otherwise the next highest power of two\n  */\n  export function ensurePowerOfTwo(x: number): number {\n    if (!isPowerOfTwo(x)) {\n        return nextHighestPowerOfTwo(x);\n    }\n    return x;\n  }\n  \n  export type HTMLImageSource = HTMLImageElement | HTMLCanvasElement;\n  \n  /**\n   * Manages loading image sources into webgl textures, a unique id is associated with all sources\n   */\n  export class TextureLoader {\n    private static _POT_CANVAS = document.createElement('canvas');\n    private static _POT_CTX = TextureLoader._POT_CANVAS.getContext('2d');\n  \n    private static _GL: WebGLRenderingContext;\n  \n    private static _TEXTURE_MAP = new Map<HTMLImageSource, WebGLTexture>();\n  \n    public static registerContext(context: WebGLRenderingContext): void {\n      TextureLoader._GL = context;\n    }\n  \n    /**\n     * Get the WebGL Texture from a source image\n     * @param image\n     */\n    public static get(image: HTMLImageSource): WebGLTexture {\n      return TextureLoader._TEXTURE_MAP.get(image);\n    }\n  \n    /**\n     * Returns whether a source image has been loaded as a texture\n     * @param image\n     */\n    public static has(image: HTMLImageSource): boolean {\n      return TextureLoader._TEXTURE_MAP.has(image);\n    }\n  \n    /**\n     * Loads a graphic into webgl and returns it's texture info, a webgl context must be previously registered\n     * @param image Source graphic\n     * @param forceUpdate Optionally force a texture to be reloaded, useful if the source graphic has changed\n     */\n    public static load(image: HTMLImageSource, forceUpdate = false): WebGLTexture {\n      // Ignore loading if webgl is not registered\n      const gl = TextureLoader._GL;\n      if (!gl) {\n        return null;\n      }\n  \n      let tex: WebGLTexture = null;\n      // If reuse the texture if it's from the same source\n      if (TextureLoader.has(image)) {\n        tex = TextureLoader.get(image);\n      }\n  \n      // Update existing webgl texture and return early\n      if (tex) {\n        if (forceUpdate) {\n          gl.bindTexture(gl.TEXTURE_2D, tex);\n          const source = TextureLoader.toPowerOfTwoImage(image);\n          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, source);\n        }\n        return tex;\n      }\n  \n      // No texture exists create a new one\n      tex = gl.createTexture();\n      const source = TextureLoader.toPowerOfTwoImage(image);\n  \n      gl.bindTexture(gl.TEXTURE_2D, tex);\n  \n      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  \n      // NEAREST for pixels\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n  \n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, source);\n  \n      TextureLoader._TEXTURE_MAP.set(image, tex);\n      return tex;\n    }\n  \n    /**\n     * Converts source images into power of two images, WebGL only supports POT images\n     * https://www.khronos.org/webgl/wiki/WebGL_and_OpenGL_Differences#Non-Power_of_Two_Texture_Support\n     * @param image\n     */\n    public static toPowerOfTwoImage(image: HTMLImageSource): HTMLImageSource {\n      const potCanvas = TextureLoader._POT_CANVAS;\n      const potCtx = TextureLoader._POT_CTX;\n      if (!isPowerOfTwo(image.width) || !isPowerOfTwo(image.height)) {\n        // Scale up the texture to the next highest power of two dimensions.\n  \n        potCanvas.width = ensurePowerOfTwo(image.width);\n        potCanvas.height = ensurePowerOfTwo(image.height);\n        potCtx.imageSmoothingEnabled = false;\n        potCtx.clearRect(0, 0, potCanvas.width, potCanvas.height);\n        potCtx.drawImage(image, 0, 0, image.width, image.height);\n        image = potCanvas;\n      }\n      return image;\n    }\n  }\n  ","\"use strict\";\n\nvar bundleURL = {};\n\nfunction getBundleURLCached(id) {\n  var value = bundleURL[id];\n\n  if (!value) {\n    value = getBundleURL();\n    bundleURL[id] = value;\n  }\n\n  return value;\n}\n\nfunction getBundleURL() {\n  try {\n    throw new Error();\n  } catch (err) {\n    var matches = ('' + err.stack).match(/(https?|file|ftp):\\/\\/[^)\\n]+/g);\n\n    if (matches) {\n      // The first two stack frames will be this function and getBundleURLCached.\n      // Use the 3rd one, which will be a runtime in the original bundle.\n      return getBaseURL(matches[2]);\n    }\n  }\n\n  return '/';\n}\n\nfunction getBaseURL(url) {\n  return ('' + url).replace(/^((?:https?|file|ftp):\\/\\/.+)\\/[^/]+$/, '$1') + '/';\n} // TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.\n\n\nfunction getOrigin(url) {\n  var matches = ('' + url).match(/(https?|file|ftp):\\/\\/[^/]+/);\n\n  if (!matches) {\n    throw new Error('Origin not found');\n  }\n\n  return matches[0];\n}\n\nexports.getBundleURL = getBundleURLCached;\nexports.getBaseURL = getBaseURL;\nexports.getOrigin = getOrigin;","module.exports = require('./helpers/bundle-url').getBundleURL('deqRD') + require('./helpers/bundle-manifest').resolve(\"4zON0\");","\nexport interface TileOptions {\n    left: number;\n    right: number;\n    top: number;\n    bottom: number;\n}\nexport class Tile {\n    public left: number = 0;\n    public right: number = 0;\n    public top: number = 0;\n    public bottom: number = 0;\n    constructor(options: TileOptions) {\n        this.left = options.left;\n        this.right = options.right;\n        this.top = options.top;\n        this.bottom = options.bottom;\n    }\n}","import { Tile } from \"./tile\";\n\nexport function generateTiles(tileRows: number, tileColumns: number, tileWidthPixels: number, tileHeightPixels: number): Tile[] {\n    const tiles: Tile[] = [];\n    const tileXs: number[] = [];\n    const tileYs: number[] = [];\n    // Precoumpute all the x's & y's for the tile geometry\n    // this keeps us from getting into trouble with floating point math \n    for (let x = 0; x < (tileColumns + 1); x++) {\n        tileXs[x] = x * tileWidthPixels;\n    }\n    for (let y = 0; y < (tileRows + 1); y++) {\n        tileYs[y] = y * tileHeightPixels;\n    }\n\n    // Create tile geometry that share the same edges\n    for (let x = 0; x < tileColumns; x++) {\n        for (let y = 0; y < tileRows; y++) {\n            const tile = new Tile({\n                left: tileXs[x],\n                right: tileXs[x + 1],\n                top: tileYs[y],\n                bottom: tileYs[y + 1]\n            });\n            tiles.push(tile);\n        }\n    }\n    return tiles;\n}","import { Matrix } from \"./matrix\";\n\nexport class TransformStack {\n    private _transforms: Matrix[] = [];\n    private _currentTransform: Matrix = Matrix.identity();\n  \n    public save(): void {\n      this._transforms.push(this._currentTransform);\n      this._currentTransform = this._currentTransform.clone();\n    }\n  \n    public restore(): void {\n      this._currentTransform = this._transforms.pop();\n    }\n  \n    public translate(x: number, y: number): Matrix {\n      return this._currentTransform.translate(x, y);\n    }\n  \n    public rotate(angle: number): Matrix {\n      return this._currentTransform.rotate(angle);\n    }\n  \n    public scale(x: number, y: number): Matrix {\n      return this._currentTransform.scale(x, y);\n    }\n  \n    public set current(matrix: Matrix) {\n      this._currentTransform = matrix;\n    }\n  \n    public get current(): Matrix {\n      return this._currentTransform;\n    }\n  }\n  ","\n\nimport { Matrix } from \"./matrix\";\nimport { vec, Vector } from \"./vector\";\n\nexport interface Dimension {\n    width: number;\n    height: number;\n}\n\n\nfunction toScreenSpace(coord: Vector, resolution: Dimension, screen: Dimension) {\n    // Map coordinate to screen space\n    let screenSpacePos = vec(\n        (coord.x / resolution.width) * screen.width,\n        (coord.y / resolution.height) * screen.height);\n\n    return screenSpacePos;\n}\n\n\nfunction toWorldSpace(coord: Vector, resolution: Dimension, screen: Dimension) {\n    // Map coordinate to world space\n    let worldSpacePos = vec(\n        (coord.x / screen.width) * resolution.width,\n        (coord.y / screen.height) * resolution.height);\n\n    return worldSpacePos;\n}\n\n\n/**\n * Pushes a world space coordintate towards the nearest screen pixel (floor)\n */\nexport function nudgeToScreenPixelFloor(transform: Matrix, coord: Vector, resolution: Dimension): Vector {\n    coord = transform.getAffineInverse().multv(coord);\n    const screen = {\n        width: resolution.width * window.devicePixelRatio,\n        height: resolution.height * window.devicePixelRatio\n    };\n\n    let screenSpacePos = toScreenSpace(coord, resolution, screen);\n\n    // Adjust by half a pixel \"bodge\" factor\n    const screenSpacePosBodge = screenSpacePos.add(vec(0.5, 0.5));\n\n    // Find the nearest screen pixel\n    const nearestScreenPixelFloor = vec(\n        Math.floor(screenSpacePosBodge.x),\n        Math.floor(screenSpacePosBodge.y));\n    \n    // Convert back to game resolution\n    const worldSpace = toWorldSpace(nearestScreenPixelFloor, resolution, screen);\n\n    // Transform back to world coordinate\n    return transform.multv(worldSpace);\n}\n\n/**\n * Pushes a world space coordintate towards the nearest screen pixel (ceiling)\n */\nexport function nudgeToScreenPixelCeil(transform: Matrix, coord: Vector, resolution: Dimension): Vector {\n    coord = transform.getAffineInverse().multv(coord);\n    const screen = {\n        width: resolution.width * window.devicePixelRatio,\n        height: resolution.height * window.devicePixelRatio\n    };\n\n    let screenSpacePos = toScreenSpace(coord, resolution, screen);\n\n    // Adjust by half a pixel \"bodge\" factor\n    const screenSpacePosBodge = screenSpacePos.add(vec(0.5, 0.5));\n\n    // Find the nearest screen pixel\n    const nearestScreenPixelCeil = vec(\n        Math.ceil(screenSpacePosBodge.x),\n        Math.ceil(screenSpacePosBodge.y));\n    \n    // Convert back to game resolution\n    const worldSpace = toWorldSpace(nearestScreenPixelCeil, resolution, screen);\n\n    // Transform back to world coordinate\n    return transform.multv(worldSpace);\n}","import { Matrix } from \"./matrix\";\nimport { Shader } from \"./shader\";\nimport fragmentSrc from './fragment.glsl';\nimport vertexSrc from './vertex.glsl';\nimport { ensurePowerOfTwo, TextureLoader } from \"./texture-loader\";\nimport { Tile } from \"./tile\";\nimport tileImageSrc from './block.png';\nimport { vec } from \"./vector\";\nimport { QuadIndexBuffer } from \"./quad-index-buffer\";\nimport { VertexBuffer } from \"./vertex-buffer\";\nimport { VertexLayout } from \"./vertex-layout\";\n\nimport * as broken from './broken';\nimport * as solutionSharedEdge from './solution-shared-edge';\nimport { TransformStack } from \"./transform-stack\";\nimport { VertexMemoryDefinition } from \"./vertex-definition\";\nimport { nudgeToScreenPixelCeil, nudgeToScreenPixelFloor } from \"./pixel-nudge\";\n\n// Flags\nlet useUVBodge = false;\nlet useScrollX = false;\nlet useScrollY = false;\nlet useUnecessaryScaling = false;\nlet useTruncate = false;\nlet useSharedTileEdge = false;\nlet usePixelToScreenNudge = false;\n\n\nconst pixelRatio$ = document.getElementById('current-pixel-ratio');\n\nconst reset$ = document.getElementById('reset');\nreset$.addEventListener('click', () => {\n    init();\n});\n\nconst scrollX$ = document.getElementById('scroll-x');\nuseScrollX = !!(scrollX$ as any).checked;\nscrollX$.addEventListener('change', (e) => {\n    useScrollX = (e.target as any).checked;\n});\n\nconst scrollY$ = document.getElementById('scroll-y');\nuseScrollY = !!(scrollY$ as any).checked;\nscrollY$.addEventListener('change', (e) => {\n    useScrollY = (e.target as any).checked;\n});\n\nconst uvBodge$ = document.getElementById('uv-bodge');\nuseUVBodge = !!(uvBodge$ as any).checked;\nuvBodge$.addEventListener('change', (e) => {\n    useUVBodge = (e.target as any).checked;\n    init();\n});\n\nconst truncate$ = document.getElementById('truncate');\nuseTruncate = !!(truncate$ as any).checked;\ntruncate$.addEventListener('change', (e) => {\n    useTruncate = (e.target as any).checked;\n    init();\n});\n\nconst unecessaryScaling$ = document.getElementById('unnecessary-geometry-scaling');\nuseUnecessaryScaling = !!(unecessaryScaling$ as any).checked;\nunecessaryScaling$.addEventListener('change', (e) => {\n    useUnecessaryScaling = (e.target as any).checked;\n    init();\n});\n\n\nconst pixelToScreenNudge$ = document.getElementById('pixel-to-screen-nudge');\nusePixelToScreenNudge = !!(pixelToScreenNudge$ as any).checked;\npixelToScreenNudge$.addEventListener('change', (e) => {\n    usePixelToScreenNudge = (e.target as any).checked;\n    init();\n});\n\nconst sharedTileEdge$ = document.getElementById('shared-tile-edge');\nuseSharedTileEdge = !!(sharedTileEdge$ as any).checked;\nsharedTileEdge$.addEventListener('change', (e) => {\n    useSharedTileEdge = (e.target as any).checked;\n    init();\n});\n\n\nconst canvas = document.getElementById('game') as HTMLCanvasElement;\nconst resolution = {\n    width: 800,\n    height: 600\n}\ncanvas.width = resolution.width;\ncanvas.height = resolution.height;\ncanvas.style.imageRendering = 'pixelated';\n// Fall back to 'crisp-edges' if 'pixelated' is not supported\n// Currently for firefox https://developer.mozilla.org/en-US/docs/Web/CSS/image-rendering\nif (canvas.style.imageRendering === '') {\n    canvas.style.imageRendering = 'crisp-edges';\n}\nconst gl = canvas.getContext('webgl', {\n    antialias: false,\n    powerPreference: 'high-performance'\n});\n\n// hidpi scaling\nfunction applyHiDPIScaling() {\n    if (window.devicePixelRatio > 1.0) {\n        canvas.width = resolution.width * window.devicePixelRatio;\n        canvas.height = resolution.height * window.devicePixelRatio;\n\n        canvas.style.width =  resolution.width + 'px';\n        canvas.style.height = resolution.height + 'px';\n    }\n    console.log('pixel ratio', window.devicePixelRatio);\n    pixelRatio$.innerText = window.devicePixelRatio.toString();\n}\napplyHiDPIScaling();\n\n\nfunction listenForPixelRatioChange() {\n    const mediaQuery = window.matchMedia(`(resolution: ${window.devicePixelRatio}dppx)`);\n    mediaQuery.addEventListener('change', pixelRatioChangeHandler, {once: true}); // doesn't work in safari\n}\n\nfunction pixelRatioChangeHandler() {\n    listenForPixelRatioChange();\n    applyHiDPIScaling();\n}\n\nlistenForPixelRatioChange();\n\nTextureLoader.registerContext(gl);\n\n// init webgl\nconst tileWidthPixels = 64;\nconst tilePOTWidth = ensurePowerOfTwo(tileWidthPixels);\nconst tileHeightPixels = 48;\nconst tilePOTHeight = ensurePowerOfTwo(tileHeightPixels);\nconst maxTiles = 200;\n\nlet tiles: Tile[];\n\nlet shader: Shader;\nlet def: VertexMemoryDefinition;\n\n// quad index buffer\nconst quads = new QuadIndexBuffer(gl, maxTiles);\n\n// load image\nconst image: HTMLImageElement = new Image();\nlet texture: WebGLTexture;\nimage.src = tileImageSrc;\nimage.decode().then(() => {\n    texture = TextureLoader.load(image);\n});\n\nlet transform: TransformStack;\n\nconst cameraPos = vec(0, 0);\n(window as any).cameraPos = cameraPos;\n\n\nfunction init() {\n    transform = new TransformStack();\n    // orthographic projection (with our world space resolution)\n    let ortho = Matrix.ortho(0, resolution.width, resolution.height, 0, 400, -400);\n    if (useUnecessaryScaling) {\n        transform.current = Matrix.identity();\n        ortho = Matrix.ortho(0, canvas.width, canvas.height, 0, 400, -400);\n        transform.scale(window.devicePixelRatio, window.devicePixelRatio);\n    }\n\n    // gl vieport with the scaled resolution (draw buffer)\n    gl.viewport(0, 0, canvas.width, canvas.height);\n\n    // Disable depth test\n    gl.disable(gl.DEPTH_TEST);\n\n    // Clear background\n    gl.clearColor(114 / 255, 213 / 255, 224 / 255, 1.0);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n\n    // Enable alpha blending \n    gl.enable(gl.BLEND);\n    // Premultiplied alpha)\n    gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n\n    // build shader\n    shader = new Shader(vertexSrc, fragmentSrc);\n    shader.compile(gl);\n\n    shader.addUniformMatrix('u_matrix', ortho.data);\n\n    // vertex definiton \n    def = shader.createVertexMemoryDefinition({\n        numberOfVertices: maxTiles * 4,\n        layout: [\n            [ 'a_position', 2 ]\n        ],\n        static: false\n    });\n\n    // Static quad UV coordinates\n    const staticVertexBuffer = new VertexBuffer(gl, maxTiles * 4, 2, true);\n    const staticVertexLayout = new VertexLayout(gl, shader, staticVertexBuffer);\n    staticVertexLayout.addVertexAttributeLayout([\n        'a_texcoord'\n    ]);\n    shader.addVertexLayout(staticVertexLayout);\n    staticVertexBuffer.fill((data, num, size) => {\n        let vertex = 0;\n        for (let i = 0; i < num; i += (size * 4)) {\n            data[i + vertex + 0] = 0;\n            data[i + vertex + 1] = 0;\n            vertex += size;\n\n            data[i + vertex + 0] = 0;\n            data[i + vertex + 1] = (tileHeightPixels - (useUVBodge ? 0.01 : 0))/ tilePOTHeight;\n            vertex += size;\n\n            data[i + vertex + 0] = (tileWidthPixels  - (useUVBodge ? 0.01 : 0)) / tilePOTWidth;\n            data[i + vertex + 1] = 0;\n            vertex += size;\n\n            data[i + vertex + 0] = (tileWidthPixels - (useUVBodge ? 0.01 : 0)) / tilePOTWidth;\n            data[i + vertex + 1] = (tileHeightPixels - (useUVBodge ? 0.01 : 0)) / tilePOTHeight;\n            vertex = 0;\n        }\n    });\n    staticVertexBuffer.upload();\n\n    // build tiles\n    if (useSharedTileEdge) {\n        tiles = solutionSharedEdge.generateTiles(4, 20, tileWidthPixels, tileHeightPixels);\n    } else {\n        tiles = broken.generateTiles(4, 20, tileWidthPixels, tileHeightPixels);\n    }\n\n    // seems to produce the artifact for me on a 1920x1080 screen\n    cameraPos.y = 201.00000000000023;\n    cameraPos.x = 89.5196762084961;\n    // cameraPos.x = 0;\n    // cameraPos.y = 0;\n}\ninit();\n\n// update \nfunction update(ms: number) {\n    if (useScrollX) {\n        cameraPos.x += (3 * (ms/1000)); // 10 pixels per second to the right\n    }\n    if (useScrollY) {\n        cameraPos.y += (.1 * (ms/1000));\n    }\n}\n\n// draw\nlet vertIndex = 0;\nfunction drawTile(tile: Tile) {\n    // Quad update\n    let topLeft = vec(useTruncate ? ~~tile.left : tile.left, useTruncate ? ~~tile.top : tile.top);\n    let bottomRight = vec(useTruncate ? ~~tile.right : tile.right, useTruncate ? ~~tile.bottom : tile.bottom);\n\n    if (useSharedTileEdge) {\n        // transform at the last minute\n        topLeft = transform.current.multv(topLeft);\n        bottomRight = transform.current.multv(bottomRight);\n    }\n\n    if (useTruncate) {\n        topLeft.x = ~~topLeft.x\n        topLeft.y = ~~topLeft.y\n        bottomRight.x = ~~bottomRight.x\n        bottomRight.y = ~~bottomRight.y\n    }\n\n    if (usePixelToScreenNudge) {\n        topLeft = nudgeToScreenPixelFloor(transform.current, topLeft, resolution);\n        bottomRight = nudgeToScreenPixelCeil(transform.current, bottomRight, resolution);\n    }\n\n    // (0, 0) - 0\n    const vertices = def.buffer.bufferData;\n    vertices[vertIndex++] = topLeft.x;\n    vertices[vertIndex++] = topLeft.y;\n\n    // (0, 1) - 1\n    vertices[vertIndex++] = topLeft.x;\n    vertices[vertIndex++] = bottomRight.y;\n\n\n    // (1, 0) - 2\n    vertices[vertIndex++] = bottomRight.x;\n    vertices[vertIndex++] = topLeft.y;\n\n\n    // (1, 1) - 3\n    vertices[vertIndex++] = bottomRight.x;\n    vertices[vertIndex++] = bottomRight.y;\n}\n\nfunction draw() {\n    // Clear the context with the newly set color. This is\n    // the function call that actually does the drawing.\n    gl.clearColor(114 / 255, 213 / 255, 224 / 255, 1.0);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n\n    gl.viewport(0, 0, canvas.width, canvas.height);\n\n    transform.save();\n    // Apply Camera transform\n    let finalPos = vec(-cameraPos.x + resolution.width/2, -cameraPos.y + resolution.height/2)\n    if (useTruncate) {\n        finalPos.x = ~~finalPos.x;\n        finalPos.y = ~~finalPos.y;\n    }\n    transform.translate(finalPos.x, finalPos.y);\n\n    // Draw scene\n    transform.save();\n    // Move tilemap to 100,300\n    transform.translate(100, 300);\n\n    // build tiles\n    if (useSharedTileEdge) {\n        tiles = solutionSharedEdge.generateTiles(4, 20, tileWidthPixels, tileHeightPixels);\n    } else {\n        tiles = broken.generateTiles2(transform, 4, 20, tileWidthPixels, tileHeightPixels);\n    }\n\n    // Update the tile \"dynamic\" geometry\n    for (const tile of tiles) {\n        drawTile(tile);\n    }\n    transform.restore();\n    transform.restore();\n\n    // Bind the shader\n    shader.use();\n\n    // Bind textures uniform\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n\n    // Upload \"dynamic\" geometry\n    def.buffer.upload();\n\n    // Use quad index buffer that defines the shapes\n    quads.bind();\n\n    // Draw all the quads (tiles * indexed verts)\n    gl.drawElements(gl.TRIANGLES, tiles.length * 6, quads.gltype, 0);\n\n    // reset vert index\n    vertIndex = 0;\n}\n\nlet last = performance.now();\nconst mainloop = (now: number) => {\n    let elapsed = now - last;\n    if (elapsed > 200) {\n        elapsed = 1;\n    }\n    window.requestAnimationFrame(mainloop);\n    update(elapsed);\n    draw();\n    last = now;\n}\nmainloop(last - 16);","\nexport class QuadIndexBuffer {\n    public buffer: WebGLBuffer;\n    public bufferData: Uint16Array | Uint32Array;\n    private _gl: WebGLRenderingContext;\n    public gltype: number;\n    constructor(gl: WebGLRenderingContext, numberOfQuads: number) {\n        this._gl = gl;\n        this.buffer = gl.createBuffer();\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.buffer);\n        this.gltype =gl.UNSIGNED_SHORT\n        const ext = gl.getExtension('OES_element_index_uint');\n        if (ext) {\n            // fall back to using gl.UNSIGNED_SHORT or tell the user they are out of luck\n            this.gltype = gl.UNSIGNED_INT;\n        }\n\n        const total = numberOfQuads * 6;\n        this.bufferData = new Uint32Array(total);\n\n        let currentQuad = 0;\n        for (let i = 0; i < total; i += 6) {\n            // first triangle\n            this.bufferData[i + 0] = currentQuad + 0;\n            this.bufferData[i + 1] = currentQuad + 1;\n            this.bufferData[i + 2] = currentQuad + 2;\n            // second triangle\n            this.bufferData[i + 3] = currentQuad + 2;\n            this.bufferData[i + 4] = currentQuad + 1;\n            this.bufferData[i + 5] = currentQuad + 3;\n            currentQuad += 4;\n        }\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint32Array(this.bufferData), gl.STATIC_DRAW);\n    }\n\n    public size() {\n        return this.bufferData.length;\n    }\n\n    public bind() {\n        const gl = this._gl;\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.buffer);\n    }\n}\n","precision highp float;\n// World position of geometry\nattribute vec2 a_position;\n\n// UV coordinate\nattribute vec2 a_texcoord;\nvarying vec2 v_texcoord;\n\n// Orthographic \"world\" transform matrix\nuniform mat4 u_matrix;\n\n// Camera position\nuniform vec2 u_camera;\n\nvoid main() {\n\n   // Set the vertex position using the ortho transform matrix\n   gl_Position = u_matrix * vec4(a_position + u_camera, 0, 1.0);\n\n   // Pass through the UV coord to the fragment shader\n   v_texcoord = a_texcoord;\n}","precision mediump float;\n\n// UV coord\nvarying vec2 v_texcoord;\n\n// Texture in the current draw\nuniform sampler2D u_texture;\n\nvoid main() {\n   vec4 color = texture2D(u_texture, v_texcoord);\n\n   gl_FragColor = color;\n}","import { Tile } from \"./tile\";\nimport { TransformStack } from \"./transform-stack\";\nimport { vec } from \"./vector\";\n\nexport function generateTiles(rows: number, columns: number, tileWidthPixels: number, tileHeightPixels: number): Tile[] {\n    const tiles: Tile[] = [];\n    const tileHalfWidth = tileWidthPixels / 2;\n    const tileHalfHeight = tileHeightPixels / 2;\n    for (let x = 0; x < columns; x++) {\n        for (let y = 0; y < rows; y++) {\n            const centerX = x * tileWidthPixels + tileHalfWidth;\n            const centerY = y * tileHeightPixels + tileHalfHeight;\n            const tile = new Tile({\n                left: ~~(centerX - tileHalfWidth),\n                right: ~~(centerX + tileHalfWidth),\n                top: ~~(centerY - tileHalfHeight),\n                bottom: ~~(centerY + tileHalfHeight)\n            });\n            tiles.push(tile);\n        }\n    }\n    return tiles;\n}\n\nexport function generateTiles2(transform: TransformStack, rows: number, columns: number, tileWidthPixels: number, tileHeightPixels: number): Tile[] {\n    const tiles: Tile[] = [];\n    for (let x = 0; x < columns; x++) {\n        for (let y = 0; y < rows; y++) {\n\n            transform.save();\n            transform.translate(x * tileWidthPixels, y * tileHeightPixels)\n\n            let topLeft = vec(0, 0);\n            let bottomRight = vec(tileWidthPixels, tileHeightPixels);\n\n            // AVOID THIS: wait until the last moment to manipulate geometry with a matrix \n            topLeft = transform.current.multv(topLeft);\n            bottomRight = transform.current.multv(bottomRight);\n            \n            const tile = new Tile({\n                left: topLeft.x,\n                right: bottomRight.x,\n                top: topLeft.y,\n                bottom: bottomRight.y\n            });\n            tiles.push(tile);\n\n            transform.restore();\n        }\n    }\n    return tiles;\n}"],"names":["$8b4d1930797b255e$export$6503ec6e8aabbaf","$8b4d1930797b255e$export$f7ad0328861e2f03","$8b4d1930797b255e$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","parcelRequire","register","JSON","parse","$a627ce1ad07534ce$export$9b781de7bf37bf48","Zero","One","Half","Up","Down","Left","Right","static","angle","Math","cos","sin","vec","isNaN","x","y","Infinity","vec1","vec2","sqrt","pow","constructor","x2","y2","this","_x","_y","val","val1","setTo","x1","y1","equals","vector","tolerance","abs","distance","v","squareDistance","v1","size","newLength","normalize","scale","d","average","vec3","add","sizeOrScale","v2","sub","v3","addEqual","v4","subEqual","v5","scaleEqual","dot","v6","cross","v7","num","vec4","perpendicular","normal","negate","toAngle","atan2","rotate","angle1","anchor","sinAngle","cosAngle","clone","toString","fixed","toFixed","$a627ce1ad07534ce$export$202e0172ed3c7be0","$1dc4a4b42d592ab0$export$5b12bf1653c0dd85","left","right","bottom","top","near","far","mat","data","a11","a21","a31","a41","a12","a22","a32","a42","translate","a13","a23","a33","a43","a14","a24","a34","a44","sine","cosine","multv","other","getAffineInverse","inverseDet","getBasisDeterminant","a","b","c","m","identity","tx","ty","Float32Array","$f9ed1d203422a138$export$41825a1ed6473903","gl","numberOfVertices","sizePerVertex","isStatic","_gl","total","buffer","createBuffer","bufferData","fill","filler","bind","bindBuffer","ARRAY_BUFFER","upload","STATIC_DRAW","DYNAMIC_DRAW","$afc14110e3eecfe3$export$f5ae2f144b95ebf4","shader","vertexBuffer","_layout","_vertexBuffer","_shader","totalVertexSizeBytes","vertexSize","vert","typeSize","glType","FLOAT","SHORT","addVertexAttributeLayout","attributes","shaderAttributes","attribute","attrib","push","offset","vertexAttribPointer","location","normalized","enableVertexAttribArray","getAttributeSize","name","$2afaed4b6db44f2a$export$7cdd9832a271a59b","options","layout","reduce","acc","map","$a04e9cfce9b3323f$export$462bb059fed9d9e5","compiled","_compiled","_vertexSource","_fragmentSource","uniforms","_vertexLayouts","_vertexDefinition","_createProgram","vertexShader","fragmentShader","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","_compileShader","gl1","source","type","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","setVertexAttributeLayout","allAttributes","Set","has","delete","Array","from","values","join","getUniforms","gl2","uniformCount","ACTIVE_UNIFORMS","uniform","getActiveUniform","uniformLocation","getUniformLocation","getAttributes","gl3","attributCount","ACTIVE_ATTRIBUTES","getActiveAttrib","attributeLocation","getAttribLocation","getAttribPointerTypeFromAttributeType","getAttribPointerSizeFromFromAttributeType","compile","gl4","VERTEX_SHADER","FRAGMENT_SHADER","addVertexLayout","vertexLayout","createVertexMemoryDefinition","vertexDefinition","addUniformMatrix","addUniformIntegerArray","name1","data1","addUniformInteger","name2","data2","addUniformFloat","name3","float","addUniformFloat2","name4","float1","float2","setAttribute","name5","vertexAttributeSize","type1","LOW_FLOAT","HIGH_FLOAT","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","BYTE","UNSIGNED_BYTE","type2","name6","INT","INT_VEC2","INT_VEC3","INT_VEC4","UNSIGNED_INT","use","useProgram","key","uniformMatrix4fv","uniform1iv","uniform1i","uniform2f","uniform1f","$d527d5b15a36402d$export$b9e43d1765415474","$d527d5b15a36402d$export$aab0a7c8695622f5","$d527d5b15a36402d$export$82344a169985296a","$d527d5b15a36402d$export$fd1bfc71f64c538c","context","_GL","image","_TEXTURE_MAP","get","image1","image2","forceUpdate","tex","bindTexture","TEXTURE_2D","toPowerOfTwoImage","texImage2D","RGBA","createTexture","pixelStorei","UNPACK_PREMULTIPLY_ALPHA_WEBGL","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","set","image3","potCanvas","_POT_CANVAS","potCtx","_POT_CTX","width","height","imageSmoothingEnabled","clearRect","drawImage","document","createElement","getContext","Map","$f29cd6c67ea13581$export$bdfd709ae4826697","$f29cd6c67ea13581$var$bundleURL","$f29cd6c67ea13581$var$getBaseURL","url","replace","value","err","matches","stack","match","$f29cd6c67ea13581$var$getBundleURL","$c53354b6288ef8e9$exports","getBundleURL","resolve","$77d3eca6b28f6de8$export$235cb65c20ad2b7","$7831a5a673b43e6a$export$8669cbe706d3ba3d","tileRows","tileColumns","tileWidthPixels","tileHeightPixels","tiles","tileXs","tileYs","tile","$3bdf2a38a05f44f6$export$8a8e09cf1b53ec26","save","_transforms","_currentTransform","restore","pop","current","matrix","$ca219048aa772dba$var$toScreenSpace","coord","resolution","screen","$ca219048aa772dba$var$toWorldSpace","$b2cb94b4b0bbae51$var$useUVBodge","$b2cb94b4b0bbae51$var$useScrollX","$b2cb94b4b0bbae51$var$useScrollY","$b2cb94b4b0bbae51$var$useUnecessaryScaling","$b2cb94b4b0bbae51$var$useTruncate","$b2cb94b4b0bbae51$var$useSharedTileEdge","$b2cb94b4b0bbae51$var$usePixelToScreenNudge","$b2cb94b4b0bbae51$var$pixelRatio$","getElementById","addEventListener","$b2cb94b4b0bbae51$var$init","$b2cb94b4b0bbae51$var$scrollX$","checked","e","target","$b2cb94b4b0bbae51$var$scrollY$","$b2cb94b4b0bbae51$var$uvBodge$","$b2cb94b4b0bbae51$var$truncate$","$b2cb94b4b0bbae51$var$unecessaryScaling$","$b2cb94b4b0bbae51$var$pixelToScreenNudge$","$b2cb94b4b0bbae51$var$sharedTileEdge$","$b2cb94b4b0bbae51$var$canvas","$b2cb94b4b0bbae51$var$resolution","style","imageRendering","$b2cb94b4b0bbae51$var$gl","antialias","powerPreference","$b2cb94b4b0bbae51$var$applyHiDPIScaling","window","devicePixelRatio","console","log","innerText","$b2cb94b4b0bbae51$var$listenForPixelRatioChange","matchMedia","$b2cb94b4b0bbae51$var$pixelRatioChangeHandler","once","registerContext","$b2cb94b4b0bbae51$var$tilePOTWidth","$b2cb94b4b0bbae51$var$tilePOTHeight","$b2cb94b4b0bbae51$var$tiles","$b2cb94b4b0bbae51$var$shader","$b2cb94b4b0bbae51$var$def","$b2cb94b4b0bbae51$var$quads","numberOfQuads","ELEMENT_ARRAY_BUFFER","gltype","UNSIGNED_SHORT","getExtension","Uint32Array","currentQuad","$b2cb94b4b0bbae51$var$image","Image","$b2cb94b4b0bbae51$var$texture","$b2cb94b4b0bbae51$var$transform","src","$parcel$interopDefault","decode","then","load","$b2cb94b4b0bbae51$var$cameraPos","ortho","viewport","disable","DEPTH_TEST","clearColor","clear","COLOR_BUFFER_BIT","enable","BLEND","blendFunc","ONE","ONE_MINUS_SRC_ALPHA","$b2cb94b4b0bbae51$var$maxTiles","staticVertexBuffer","staticVertexLayout","vertex","rows","columns","tileHalfWidth","tileHalfHeight","centerX","centerY","$31f3c21fabe2f5c2$export$8669cbe706d3ba3d","cameraPos","$b2cb94b4b0bbae51$var$vertIndex","$b2cb94b4b0bbae51$var$drawTile","topLeft","bottomRight","transform","screenSpacePosBodge","worldSpace","floor","$ca219048aa772dba$export$41a2bbb755587376","ceil","$ca219048aa772dba$export$699ccb92e297b92f","vertices","$b2cb94b4b0bbae51$var$draw","finalPos","$31f3c21fabe2f5c2$export$1675db767f14c848","activeTexture","TEXTURE0","drawElements","TRIANGLES","$b2cb94b4b0bbae51$var$last","performance","now","$b2cb94b4b0bbae51$var$mainloop","elapsed","ms","requestAnimationFrame"],"version":3,"file":"index.74a1c0ae.js.map"}